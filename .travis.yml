language: cpp

compiler:
  - gcc
  - clang

env:
  matrix:
    - TASK=build
    - TASK=unit_tests
    - TASK=analyze

matrix:
  allow_failures:
    - env: TASK=analyze # fail on static code analysis doesn't fail whole build

addons:
  apt:
    sources:
    - llvm-toolchain-precise-3.6
    - ubuntu-toolchain-r-test
    packages:
    - clang-3.6
    - gcc-5
    - g++-5


before_install: 
  # PREPARE ENVIRONMENT
  #####################

  # UPDATE COMPILERS (GCC-5, Clang 3.6)
  - if [ "$CXX" = "g++"     ]; then export CXX="g++-5"       CC="gcc-5";     fi
  - if [ "$CXX" = "clang++" ]; then export CXX="clang++-3.6" CC="clang-3.6"; fi

  # UPDATE CMAKE TO >= 2.8.12, INSTALL CPPCHECK AND UPDATE GCC LINK
  - sudo add-apt-repository ppa:smspillaz/cmake-2.8.12 -y
  - sudo apt-get update
  - sudo apt-get purge cmake
  - sudo apt-get install cmake

  # INSTALL CPPCHECK
  - sudo apt-get install cppcheck

  # LINK GCC TO GCC-5
  - sudo update-alternatives --install /usr/bin/gcc  gcc  /usr/bin/gcc-5  90
  - sudo update-alternatives --install /usr/bin/g++  g++  /usr/bin/g++-5  90
  - sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-5 90

  # INSTALL GTEST (workaround)
  - sudo apt-get install libgtest-dev
  - cd /usr/src/gtest
  - sudo cmake .
  - sudo make
  - sudo mv libgtest* /usr/lib/
  - cd "${TRAVIS_BUILD_DIR}"

  # DISPLAY SOFTWARE VERSIONS
  - $CXX --version
  - cmake --version
  - cppcheck --version


install:
  # INSTALL DEPENDENCIES
  ######################
  
  # INSTALLING DEPENDENCIES
  - cd scripts/linux/
  - sudo chmod +x install_dependencies.sh
  - sudo ./install_dependencies.sh
  - cd ../..
  
  # CONFIGURE INSTALLED DEPENDENCIES
  - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64
  - sudo ldconfig

  # CREATE FAKE DISPLAY
  - export DISPLAY=:99.0
  - sh -e /etc/init.d/xvfb start

  # INSTALL CPP-COVERALLS
  - sudo pip install requests[security]
  - sudo pip install cpp-coveralls


before_script:
  - echo "ENVIRONMENT VARIABLES:"
  - echo "CXX = $CXX"
  - echo "TASK = $TASK"


script:
  # TASK = build
  - if [ "$TASK" = "build" ]; then cmake .; fi
  - if [ "$TASK" = "build" ]; then make;    fi

  # TASK = analyze (GCC-5)
  - if [ "$TASK" = "analyze" ] && [ "$CXX" = "g++-5" ]; then cppcheck "src" --inline-suppr --template=vs --enable=style --force --std=c++11 -j 8 -I "include" 2> cppcheck.txt; fi
  - if [ "$TASK" = "analyze" ] && [ "$CXX" = "g++-5" ] && [ -s cppcheck.txt ]; then cat cppcheck.txt; exit 1; fi

  # TASK = analyze (Clang-3.6)
  - if [ "$TASK" = "analyze" ] && [ "$CXX" = "clang++-3.6" ]; then scan-build-3.6 cmake .; fi
  - if [ "$TASK" = "analyze" ] && [ "$CXX" = "clang++-3.6" ]; then scan-build-3.6 --status-bugs -v make -j 8; fi

  # TASK = unit_tests
  - if [ "$TASK" = "unit_tests" ]; then cmake -DBUILD_TESTS=ON .; fi
  - if [ "$TASK" = "unit_tests" ]; then make; fi
  - if [ "$TASK" = "unit_tests" ]; then cd tests/bin/; fi
  - if [ "$TASK" = "unit_tests" ]; then ./GLUL_Unit_Tests; fi
  - if [ "$TASK" = "unit_tests" ]; then cd ../../; fi


after_success:
  # TASK = unit_tests
  - if [ "$TASK" = "unit_tests" ] && [ "$CXX" = "g++-5" ]; then cd tests/bin/; fi
  - if [ "$TASK" = "unit_tests" ] && [ "$CXX" = "g++-5" ]; then coveralls --verbose --root ../../ -E ".*external.*" -E ".*CMakeFiles.*" -E ".*tests/.*.cpp.*" -E ".*examples.*" -E ".*bin.*" -E ".*project.*"; fi
  - if [ "$TASK" = "unit_tests" ] && [ "$CXX" = "g++-5" ]; then cd ../../; fi


before_deploy:
  - echo "Deploying..."

  # Setup variables
  - DEPLOY_NAME="GLUL-${CC}-${TRAVIS_BRANCH}-latest"
  - DEPLOY_NAME_TAG="GLUL-${TRAVIS_TAG}-${CC}"
  - DEPLOY_NAME_FILE="${DEPLOY_NAME}.tar.gz"
  - DEPLOY_NAME_FILE_TAG="${DEPLOY_NAME_TAG}.tar.gz"
  - DEPLOY_DIR_1="deploy"
  - DEPLOY_DIR_2="${DEPLOY_DIR_1}/ubuntu"
  - DEPLOY_DIR_FULL="${DEPLOY_DIR_2}/${DEPLOY_NAME}"
  - DEPLOY_DATE="`date`"
  
  # Create directories
  - mkdir "${DEPLOY_DIR_1}"
  - mkdir "${DEPLOY_DIR_2}"
  - mkdir "${DEPLOY_DIR_FULL}"

  # Copy files to directories
  - cp -r bin             "${DEPLOY_DIR_FULL}/"
  - cp -r examples        "${DEPLOY_DIR_FULL}/"
  - cp -r include         "${DEPLOY_DIR_FULL}/"
  - cp -r lib             "${DEPLOY_DIR_FULL}/"
  - cp -r src             "${DEPLOY_DIR_FULL}/"
  - cp -r tests           "${DEPLOY_DIR_FULL}/"
  - cp -r CMakeLists.txt  "${DEPLOY_DIR_FULL}/"
  - cp -r LICENSE         "${DEPLOY_DIR_FULL}/"
  - cp -r README.md       "${DEPLOY_DIR_FULL}/"
  
  # Add build info
  - echo "Build id - ${TRAVIS_BUILD_ID} (#${TRAVIS_BUILD_NUMBER})" > "${DEPLOY_DIR_FULL}/BuildInfo.txt"
  - echo "Branch - ${TRAVIS_BRANCH}" >> "${DEPLOY_DIR_FULL}/BuildInfo.txt"
  - echo "Date of build - ${DEPLOY_DATE}" >> "${DEPLOY_DIR_FULL}/BuildInfo.txt"
  
  # Create package to upload
  - cd deploy/ubuntu
  - GZIP=-9 tar -cvzf "${DEPLOY_NAME_FILE}" "${DEPLOY_NAME}/"
  - cd ../..
  - echo "Package ${DEPLOY_NAME_FILE} created..."

  # If this is tagged commit, change package to TAG version and deploy it only as such
  - if [ -n "${TRAVIS_TAG}" ]; then cd deploy/ubuntu; fi
  - if [ -n "${TRAVIS_TAG}" ]; then mv "${DEPLOY_NAME_FILE}" "${DEPLOY_NAME_FILE_TAG}"; fi
  - if [ -n "${TRAVIS_TAG}" ]; then cd ../..; fi
  - if [ -n "${TRAVIS_TAG}" ]; then echo "TAG package ${DEPLOY_NAME_FILE} created..."; fi


deploy:
  provider: bintray
  user: "ripper37"
  file: ".bintray.json"
  skip_cleanup: true
  key:
    secure: FqxQ8UkLlOFUg6WtixN4M9aog1zWr2ZsmkdJUd0fk9mSLw/ldlkTbu2l5mfUlv4tMBaI5MgifpTDFVg/9SViKLXNcKT3Brg4+/6QqFaB6gAzvTFXvxoCgeKi3zKygg6MSaJy1V4s+i1hh5YyoYWG7SNORhEiKxFsHDAbbJj5ubC8Zkb/S1xQdBP+CYCA08oVz/KkT5UQyoxFYEoqmhPWkBT5UZMuSlY4BHbQirusYlxU8jew+wSLdZC6pwQsXtUPTHppkKlTHUTTZyuw2UfD/G3fN89v0SbWeKN3iiOS/L6S0MIIBRb+PI1j6x51kK+mfYtTzaBelA3AvHysGx/ww4EY2pIjbI3huy9h1bhjhRQoHXdlUfk4ZXmgQuUz2dLZGdb9MtRaMLLXKZ10pmheIBCbefj9ikB1JHkzSNsPgjnLx58RJZaWfswjDmcvR6IUW27FMQgK5hb8+5VGqBfrlZy6zbgJvoebUwp/Pkuvc1NnVWpeLeWWMtRhGMqUzNtxn9rc5U3XNPmwO9+snIIPXOApFXKF154QLRYn0qx+tegJhb2rqwh7fC63XxC3BqqW823YqoWXSpzXV2eCK61wO662dWnrsBVok/r7sD9RBQIvTqk4iUATN9agRzqi5ljZDi/QqpchRx0PhRHfR6sVyMQP+TB0gQRV5lCbfASUtyo=
  on:
    all_branches: true
    condition: $TASK = "build"


after_deploy:
  - echo "Deployed!"
